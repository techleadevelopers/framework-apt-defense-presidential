import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { 
  Bug, 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  TrendingUp, 
  Server, 
  Globe, 
  Search,
  Filter,
  Download,
  RefreshCw,
  Target,
  Eye,
  ExternalLink
} from "lucide-react";

interface Vulnerability {
  id: string;
  cveId: string;
  title: string;
  description: string;
  severity: "critical" | "high" | "medium" | "low";
  cvssScore: number;
  status: "open" | "in-progress" | "patched" | "accepted" | "false-positive";
  discoveredDate: Date;
  dueDate?: Date;
  affectedAssets: string[];
  vector: string;
  exploitAvailable: boolean;
  patchAvailable: boolean;
  category: string;
  vendor: string;
  product: string;
}

export default function VulnerabilityManagement() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [filterSeverity, setFilterSeverity] = useState<string>("all");
  const [filterStatus, setFilterStatus] = useState<string>("all");
  const [searchTerm, setSearchTerm] = useState("");

  // Mock vulnerabilities data
  useEffect(() => {
    const mockVulnerabilities: Vulnerability[] = [
      {
        id: "VULN-2025-001",
        cveId: "CVE-2024-34362",
        title: "MOVEit Transfer Remote Code Execution",
        description: "A critical vulnerability in Progress MOVEit Transfer allows unauthenticated attackers to execute arbitrary code remotely.",
        severity: "critical",
        cvssScore: 9.8,
        status: "open",
        discoveredDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),
        affectedAssets: ["SRV-FILE01", "SRV-FILE02", "SRV-BACKUP01"],
        vector: "Network",
        exploitAvailable: true,
        patchAvailable: true,
        category: "Remote Code Execution",
        vendor: "Progress Software",
        product: "MOVEit Transfer"
      },
      {
        id: "VULN-2025-002",
        cveId: "CVE-2024-28252",
        title: "Windows Kernel Privilege Escalation",
        description: "Local privilege escalation vulnerability in Windows Kernel that allows attackers to gain SYSTEM privileges.",
        severity: "high",
        cvssScore: 7.8,
        status: "in-progress",
        discoveredDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000),
        affectedAssets: ["All Windows Workstations", "SRV-DC01", "SRV-SQL01"],
        vector: "Local",
        exploitAvailable: false,
        patchAvailable: true,
        category: "Privilege Escalation",
        vendor: "Microsoft",
        product: "Windows 11"
      },
      {
        id: "VULN-2025-003",
        cveId: "CVE-2024-45409",
        title: "Apache HTTP Server DoS Vulnerability",
        description: "Denial of service vulnerability in Apache HTTP Server that can be exploited by sending specially crafted requests.",
        severity: "medium",
        cvssScore: 5.3,
        status: "patched",
        discoveredDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
        affectedAssets: ["SRV-WEB01", "SRV-WEB02"],
        vector: "Network",
        exploitAvailable: false,
        patchAvailable: true,
        category: "Denial of Service",
        vendor: "Apache",
        product: "HTTP Server"
      },
      {
        id: "VULN-2025-004",
        cveId: "CVE-2024-39894",
        title: "OpenSSH RegreSSHion Vulnerability",
        description: "Signal handler race condition in OpenSSH that may allow remote code execution in unprivileged child processes.",
        severity: "high",
        cvssScore: 8.1,
        status: "open",
        discoveredDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        affectedAssets: ["All Linux Servers", "Network Devices"],
        vector: "Network",
        exploitAvailable: true,
        patchAvailable: true,
        category: "Remote Code Execution",
        vendor: "OpenBSD",
        product: "OpenSSH"
      },
      {
        id: "VULN-2025-005",
        cveId: "CVE-2024-12345",
        title: "Weak SSL/TLS Configuration",
        description: "Servers configured with weak SSL/TLS cipher suites allowing potential man-in-the-middle attacks.",
        severity: "low",
        cvssScore: 3.7,
        status: "accepted",
        discoveredDate: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000),
        affectedAssets: ["Legacy Systems"],
        vector: "Network",
        exploitAvailable: false,
        patchAvailable: false,
        category: "Cryptographic Issues",
        vendor: "Various",
        product: "SSL/TLS Implementation"
      }
    ];
    setVulnerabilities(mockVulnerabilities);
  }, []);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-500 text-white";
      case "high": return "bg-orange-500 text-white";
      case "medium": return "bg-yellow-500 text-black";
      case "low": return "bg-blue-500 text-white";
      default: return "bg-gray-500 text-white";
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "open": return "bg-red-100 text-red-800 border-red-200";
      case "in-progress": return "bg-yellow-100 text-yellow-800 border-yellow-200";
      case "patched": return "bg-green-100 text-green-800 border-green-200";
      case "accepted": return "bg-blue-100 text-blue-800 border-blue-200";
      case "false-positive": return "bg-gray-100 text-gray-800 border-gray-200";
      default: return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  const getCVSSColor = (score: number) => {
    if (score >= 9.0) return "text-red-500";
    if (score >= 7.0) return "text-orange-500";
    if (score >= 4.0) return "text-yellow-500";
    return "text-blue-500";
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const severityMatch = filterSeverity === "all" || vuln.severity === filterSeverity;
    const statusMatch = filterStatus === "all" || vuln.status === statusMatch;
    const searchMatch = searchTerm === "" || 
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.cveId.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.vendor.toLowerCase().includes(searchTerm.toLowerCase());
    
    return severityMatch && statusMatch && searchMatch;
  });

  const vulnStats = {
    total: vulnerabilities.length,
    critical: vulnerabilities.filter(v => v.severity === "critical").length,
    high: vulnerabilities.filter(v => v.severity === "high").length,
    open: vulnerabilities.filter(v => v.status === "open").length,
    overdue: vulnerabilities.filter(v => v.dueDate && new Date() > v.dueDate && v.status !== "patched").length,
    withExploit: vulnerabilities.filter(v => v.exploitAvailable).length
  };

  const getTimeAgo = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) return "Today";
    if (diffDays === 1) return "Yesterday";
    return `${diffDays} days ago`;
  };

  const getDaysUntilDue = (dueDate?: Date) => {
    if (!dueDate) return null;
    const now = new Date();
    const diffMs = dueDate.getTime() - now.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-orbitron font-bold text-[var(--cyber-cyan)]">Vulnerability Management</h1>
          <p className="text-gray-400">Identificar, avaliar, priorizar e remediar vulnerabilidades em ativos de TI</p>
        </div>
        <div className="flex space-x-2">
          <Button variant="outline" className="border-[var(--cyber-cyan)]/30 text-[var(--cyber-cyan)]">
            <RefreshCw className="w-4 h-4 mr-2" />
            Scan Now
          </Button>
          <Button className="bg-[var(--cyber-cyan)] text-[var(--cyber-dark)]">
            <Download className="w-4 h-4 mr-2" />
            Export Report
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
        <Card className="bg-[var(--cyber-dark)] border-[var(--cyber-cyan)]/30">
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-[var(--cyber-cyan)]">{vulnStats.total}</div>
            <div className="text-xs text-gray-400">Total Vulnerabilities</div>
          </CardContent>
        </Card>
        <Card className="bg-[var(--cyber-dark)] border-red-500/30">
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-red-400">{vulnStats.critical}</div>
            <div className="text-xs text-gray-400">Critical</div>
          </CardContent>
        </Card>
        <Card className="bg-[var(--cyber-dark)] border-orange-500/30">
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-orange-400">{vulnStats.high}</div>
            <div className="text-xs text-gray-400">High</div>
          </CardContent>
        </Card>
        <Card className="bg-[var(--cyber-dark)] border-yellow-500/30">
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-yellow-400">{vulnStats.open}</div>
            <div className="text-xs text-gray-400">Open</div>
          </CardContent>
        </Card>
        <Card className="bg-[var(--cyber-dark)] border-red-600/30">
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-red-600">{vulnStats.overdue}</div>
            <div className="text-xs text-gray-400">Overdue</div>
          </CardContent>
        </Card>
        <Card className="bg-[var(--cyber-dark)] border-purple-500/30">
          <CardContent className="p-4 text-center">
            <div className="text-2xl font-bold text-purple-400">{vulnStats.withExploit}</div>
            <div className="text-xs text-gray-400">With Exploit</div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="list" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="list">Vulnerability List</TabsTrigger>
          <TabsTrigger value="assets">By Assets</TabsTrigger>
          <TabsTrigger value="trending">Trending CVEs</TabsTrigger>
          <TabsTrigger value="compliance">Compliance</TabsTrigger>
        </TabsList>

        <TabsContent value="list" className="space-y-4">
          {/* Search and Filters */}
          <div className="flex space-x-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search vulnerabilities, CVE, vendor..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 bg-[var(--cyber-steel)] border border-[var(--cyber-cyan)]/30 rounded text-white placeholder-gray-400"
              />
            </div>
            <select 
              value={filterSeverity} 
              onChange={(e) => setFilterSeverity(e.target.value)}
              className="p-2 bg-[var(--cyber-steel)] border border-[var(--cyber-cyan)]/30 rounded text-white"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
            <select 
              value={filterStatus} 
              onChange={(e) => setFilterStatus(e.target.value)}
              className="p-2 bg-[var(--cyber-steel)] border border-[var(--cyber-cyan)]/30 rounded text-white"
            >
              <option value="all">All Status</option>
              <option value="open">Open</option>
              <option value="in-progress">In Progress</option>
              <option value="patched">Patched</option>
              <option value="accepted">Accepted</option>
            </select>
          </div>

          {/* Vulnerability List */}
          <div className="space-y-3">
            {filteredVulnerabilities.map((vuln) => {
              const daysUntilDue = getDaysUntilDue(vuln.dueDate);
              const isOverdue = daysUntilDue !== null && daysUntilDue < 0;
              
              return (
                <Card key={vuln.id} className="bg-[var(--cyber-dark)] border-[var(--cyber-cyan)]/30 hover:border-[var(--cyber-cyan)]/50">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant="outline" className={getStatusColor(vuln.status)}>
                          {vuln.status.replace("-", " ").toUpperCase()}
                        </Badge>
                        <span className={`text-lg font-bold ${getCVSSColor(vuln.cvssScore)}`}>
                          {vuln.cvssScore}
                        </span>
                        {vuln.exploitAvailable && (
                          <Badge className="bg-red-600 text-white">
                            <Target className="w-3 h-3 mr-1" />
                            EXPLOIT
                          </Badge>
                        )}
                        {isOverdue && (
                          <Badge className="bg-red-700 text-white">
                            <Clock className="w-3 h-3 mr-1" />
                            OVERDUE
                          </Badge>
                        )}
                      </div>
                      <div className="text-sm text-gray-400 text-right">
                        <div>{vuln.cveId}</div>
                        <div>Discovered {getTimeAgo(vuln.discoveredDate)}</div>
                        {daysUntilDue !== null && (
                          <div className={isOverdue ? "text-red-400" : "text-[var(--cyber-cyan)]"}>
                            {isOverdue ? `${Math.abs(daysUntilDue)} days overdue` : `Due in ${daysUntilDue} days`}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <h3 className="text-lg font-semibold text-white mb-2">{vuln.title}</h3>
                    <p className="text-gray-300 text-sm mb-3">{vuln.description}</p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm mb-3">
                      <div>
                        <span className="text-gray-400">Vendor/Product:</span>
                        <span className="text-white ml-2">{vuln.vendor} / {vuln.product}</span>
                      </div>
                      <div>
                        <span className="text-gray-400">Vector:</span>
                        <span className="text-white ml-2">{vuln.vector}</span>
                      </div>
                      <div>
                        <span className="text-gray-400">Affected Assets:</span>
                        <span className="text-[var(--cyber-cyan)] ml-2">{vuln.affectedAssets.length}</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        {vuln.patchAvailable && (
                          <div className="flex items-center space-x-1 text-green-400">
                            <CheckCircle className="w-4 h-4" />
                            <span className="text-sm">Patch Available</span>
                          </div>
                        )}
                        <div className="flex items-center space-x-1">
                          <Server className="w-4 h-4 text-gray-400" />
                          <span className="text-gray-300 text-sm">{vuln.affectedAssets.length} assets</span>
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <Button size="sm" variant="outline" className="border-[var(--cyber-cyan)]/30 text-[var(--cyber-cyan)]">
                          <Eye className="w-4 h-4 mr-1" />
                          View
                        </Button>
                        <Button size="sm" variant="outline" className="border-[var(--cyber-cyan)]/30 text-[var(--cyber-cyan)]">
                          <ExternalLink className="w-4 h-4 mr-1" />
                          CVE
                        </Button>
                        {vuln.status === "open" && (
                          <Button size="sm" className="bg-[var(--cyber-cyan)] text-[var(--cyber-dark)]">
                            Remediate
                          </Button>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </TabsContent>

        <TabsContent value="assets" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {[
              { name: "SRV-DC01", vulns: 3, critical: 1, high: 2 },
              { name: "SRV-WEB01", vulns: 2, critical: 0, high: 1 },
              { name: "SRV-FILE01", vulns: 4, critical: 2, high: 1 },
              { name: "Network Devices", vulns: 1, critical: 0, high: 1 },
              { name: "Workstations", vulns: 1, critical: 0, high: 1 },
              { name: "Legacy Systems", vulns: 1, critical: 0, high: 0 }
            ].map((asset, index) => (
              <Card key={index} className="bg-[var(--cyber-dark)] border-[var(--cyber-cyan)]/30">
                <CardHeader className="pb-3">
                  <CardTitle className="text-[var(--cyber-cyan)] flex items-center space-x-2">
                    <Server className="w-5 h-5" />
                    <span>{asset.name}</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-400">Total Vulnerabilities:</span>
                      <span className="text-white">{asset.vulns}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">Critical:</span>
                      <span className="text-red-400">{asset.critical}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">High:</span>
                      <span className="text-orange-400">{asset.high}</span>
                    </div>
                    <div className="w-full bg-gray-600 rounded-full h-2 mt-3">
                      <div 
                        className="bg-red-500 h-2 rounded-full" 
                        style={{ width: `${(asset.critical + asset.high) / asset.vulns * 100}%` }}
                      ></div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="trending" className="space-y-4">
          <Card className="bg-[var(--cyber-dark)] border-[var(--cyber-cyan)]/30">
            <CardHeader>
              <CardTitle className="text-[var(--cyber-cyan)] flex items-center space-x-2">
                <TrendingUp className="w-5 h-5" />
                <span>Top CISA KEV (Known Exploited Vulnerabilities)</span>
              </CardTitle>
              <CardDescription>Vulnerabilidades com exploits ativos sendo observados em ataques</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {[
                  { cve: "CVE-2024-34362", title: "MOVEit Transfer RCE", exploitActivity: "High", addedToKEV: "2024-06-15" },
                  { cve: "CVE-2024-39894", title: "OpenSSH RegreSSHion", exploitActivity: "Medium", addedToKEV: "2024-07-01" },
                  { cve: "CVE-2024-28252", title: "Windows Kernel Privilege Escalation", exploitActivity: "Low", addedToKEV: "2024-05-20" }
                ].map((kev, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-[var(--cyber-steel)]/20 rounded border border-[var(--cyber-cyan)]/10">
                    <div>
                      <h4 className="font-medium text-white">{kev.cve}</h4>
                      <p className="text-sm text-gray-300">{kev.title}</p>
                    </div>
                    <div className="text-right">
                      <Badge className={
                        kev.exploitActivity === "High" ? "bg-red-500 text-white" :
                        kev.exploitActivity === "Medium" ? "bg-orange-500 text-white" :
                        "bg-yellow-500 text-black"
                      }>
                        {kev.exploitActivity} Activity
                      </Badge>
                      <div className="text-xs text-gray-400 mt-1">Added {kev.addedToKEV}</div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="compliance" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="bg-[var(--cyber-dark)] border-[var(--cyber-cyan)]/30">
              <CardHeader>
                <CardTitle className="text-[var(--cyber-cyan)]">Compliance Status</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {[
                  { framework: "NIST Cybersecurity Framework", compliance: 87, color: "green" },
                  { framework: "LGPD Compliance", compliance: 92, color: "blue" },
                  { framework: "ISO 27001", compliance: 78, color: "yellow" },
                  { framework: "CIS Controls", compliance: 84, color: "green" }
                ].map((item, index) => (
                  <div key={index} className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-300">{item.framework}</span>
                      <span className="text-[var(--cyber-cyan)]">{item.compliance}%</span>
                    </div>
                    <Progress value={item.compliance} className="h-2" />
                  </div>
                ))}
              </CardContent>
            </Card>

            <Card className="bg-[var(--cyber-dark)] border-[var(--cyber-cyan)]/30">
              <CardHeader>
                <CardTitle className="text-[var(--cyber-cyan)]">Remediation Progress</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-3xl font-bold text-[var(--cyber-cyan)]">73%</div>
                    <div className="text-gray-400">Overall Remediation Rate</div>
                  </div>
                  <div className="space-y-3">
                    <div className="flex justify-between">
                      <span className="text-gray-300">Critical (30 days)</span>
                      <span className="text-green-400">95%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-300">High (60 days)</span>
                      <span className="text-yellow-400">78%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-300">Medium (90 days)</span>
                      <span className="text-blue-400">64%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-300">Low (180 days)</span>
                      <span className="text-gray-400">45%</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}