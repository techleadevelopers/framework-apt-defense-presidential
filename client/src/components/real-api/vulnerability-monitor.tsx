// Real-time Vulnerability Monitor using NVD NIST API
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useVulnerabilityMonitoring } from '@/hooks/use-real-api-data';
import { 
  Bug, 
  AlertTriangle, 
  Shield, 
  Search, 
  RefreshCw,
  ExternalLink,
  Calendar,
  TrendingUp
} from 'lucide-react';

export default function VulnerabilityMonitor() {
  const { vulnerabilities, stats, isLoading, error, refreshVulnerabilities } = useVulnerabilityMonitoring();
  const [searchTerm, setSearchTerm] = useState('');

  const filteredVulnerabilities = vulnerabilities.filter(vuln => 
    vuln.cve?.id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    vuln.cve?.descriptions?.[0]?.value?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getSeverityColor = (severity: string) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'bg-red-500/20 text-red-400 border-red-500/50';
      case 'high': return 'bg-orange-500/20 text-orange-400 border-orange-500/50';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/50';
      case 'low': return 'bg-green-500/20 text-green-400 border-green-500/50';
      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/50';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const getTopVendors = () => {
    const vendorCount = new Map<string, number>();
    
    vulnerabilities.forEach(vuln => {
      vuln.cve?.configurations?.forEach((config: any) => {
        config.nodes?.forEach((node: any) => {
          node.cpeMatch?.forEach((cpe: any) => {
            if (cpe.criteria) {
              const parts = cpe.criteria.split(':');
              if (parts.length > 3) {
                const vendor = parts[3];
                vendorCount.set(vendor, (vendorCount.get(vendor) || 0) + 1);
              }
            }
          });
        });
      });
    });

    return Array.from(vendorCount.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([vendor, count]) => ({ vendor, count }));
  };

  if (error) {
    return (
      <Card className="glass-panel border-red-500/30">
        <CardContent className="p-6">
          <div className="text-center text-red-400">
            <AlertTriangle className="w-8 h-8 mx-auto mb-2" />
            <p>Failed to load vulnerability data: {error}</p>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={refreshVulnerabilities}
              className="mt-4"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Retry
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card className="glass-panel border-[var(--cyber-cyan)]/30">
        <CardHeader>
          <CardTitle className="font-orbitron text-[var(--cyber-cyan)] flex items-center justify-between">
            <span className="flex items-center">
              <Bug className="w-5 h-5 mr-2" />
              Live Vulnerability Monitor
              <Badge variant="outline" className="ml-2 bg-green-500/20 text-green-400">
                NVD NIST API
              </Badge>
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={refreshVulnerabilities}
              disabled={isLoading}
              className="border-[var(--cyber-cyan)]/50"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {/* Statistics Dashboard */}
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
            <div className="text-center p-3 rounded-lg bg-[var(--cyber-navy)]/30">
              <div className="text-2xl font-bold text-[var(--cyber-cyan)]">{stats.total}</div>
              <div className="text-xs text-gray-400">Total CVEs</div>
            </div>
            <div className="text-center p-3 rounded-lg bg-red-500/10">
              <div className="text-2xl font-bold text-red-400">{stats.critical}</div>
              <div className="text-xs text-gray-400">Critical</div>
            </div>
            <div className="text-center p-3 rounded-lg bg-orange-500/10">
              <div className="text-2xl font-bold text-orange-400">{stats.high}</div>
              <div className="text-xs text-gray-400">High</div>
            </div>
            <div className="text-center p-3 rounded-lg bg-yellow-500/10">
              <div className="text-2xl font-bold text-yellow-400">{stats.medium}</div>
              <div className="text-xs text-gray-400">Medium</div>
            </div>
            <div className="text-center p-3 rounded-lg bg-green-500/10">
              <div className="text-2xl font-bold text-green-400">{stats.low}</div>
              <div className="text-xs text-gray-400">Low</div>
            </div>
          </div>

          <Tabs defaultValue="recent" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="recent">Recent CVEs</TabsTrigger>
              <TabsTrigger value="critical">Critical Only</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
            </TabsList>

            <TabsContent value="recent" className="space-y-4">
              {/* Search */}
              <div className="flex items-center space-x-2">
                <Search className="w-4 h-4 text-gray-400" />
                <Input
                  placeholder="Search CVEs..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="flex-1"
                />
              </div>

              {/* CVE List */}
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {isLoading ? (
                  <div className="text-center py-8">
                    <RefreshCw className="w-8 h-8 animate-spin mx-auto mb-2 text-[var(--cyber-cyan)]" />
                    <p className="text-gray-400">Loading vulnerabilities...</p>
                  </div>
                ) : filteredVulnerabilities.length === 0 ? (
                  <div className="text-center py-8 text-gray-400">
                    <Bug className="w-8 h-8 mx-auto mb-2 opacity-50" />
                    <p>No vulnerabilities found</p>
                  </div>
                ) : (
                  filteredVulnerabilities.slice(0, 20).map((vuln) => {
                    const cve = vuln.cve;
                    const cvssData = cve?.metrics?.cvssMetricV31?.[0]?.cvssData;
                    const severity = cvssData?.baseSeverity || 'Unknown';
                    const score = cvssData?.baseScore || 0;
                    const description = cve?.descriptions?.[0]?.value || 'No description available';

                    return (
                      <div
                        key={cve?.id}
                        className="flex items-start space-x-3 p-4 rounded-lg bg-[var(--cyber-navy)]/30 hover:bg-[var(--cyber-navy)]/50 transition-colors cursor-pointer"
                        onClick={() => {
                          window.open(`https://nvd.nist.gov/vuln/detail/${cve?.id}`, '_blank');
                        }}
                      >
                        <div className="flex-shrink-0 mt-1">
                          <Shield className="w-5 h-5 text-[var(--cyber-cyan)]" />
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center space-x-2 mb-2">
                            <span className="font-mono text-sm font-medium text-white">
                              {cve?.id}
                            </span>
                            <Badge className={`text-xs ${getSeverityColor(severity)}`}>
                              {severity} {score ? `(${score})` : ''}
                            </Badge>
                            <span className="text-xs text-gray-400">
                              {formatDate(cve?.published)}
                            </span>
                          </div>
                          
                          <p className="text-sm text-gray-300 mb-2 line-clamp-2">
                            {description}
                          </p>
                          
                          <div className="flex items-center space-x-2">
                            <Calendar className="w-3 h-3 text-gray-400" />
                            <span className="text-xs text-gray-400">
                              Published: {formatDate(cve?.published)}
                            </span>
                            <ExternalLink className="w-3 h-3 text-gray-400" />
                          </div>
                        </div>
                      </div>
                    );
                  })
                )}
              </div>
            </TabsContent>

            <TabsContent value="critical" className="space-y-4">
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {filteredVulnerabilities
                  .filter(vuln => vuln.cve?.metrics?.cvssMetricV31?.[0]?.cvssData?.baseSeverity === 'CRITICAL')
                  .map((vuln) => {
                    const cve = vuln.cve;
                    const cvssData = cve?.metrics?.cvssMetricV31?.[0]?.cvssData;
                    const score = cvssData?.baseScore || 0;
                    const description = cve?.descriptions?.[0]?.value || 'No description available';

                    return (
                      <div
                        key={cve?.id}
                        className="flex items-start space-x-3 p-4 rounded-lg bg-red-500/10 border border-red-500/30 hover:bg-red-500/20 transition-colors cursor-pointer"
                        onClick={() => {
                          window.open(`https://nvd.nist.gov/vuln/detail/${cve?.id}`, '_blank');
                        }}
                      >
                        <AlertTriangle className="w-5 h-5 text-red-400 mt-1" />
                        
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-2">
                            <span className="font-mono text-sm font-medium text-white">
                              {cve?.id}
                            </span>
                            <Badge className="text-xs bg-red-500/20 text-red-400 border-red-500/50">
                              CRITICAL ({score})
                            </Badge>
                          </div>
                          
                          <p className="text-sm text-gray-300 mb-2">
                            {description}
                          </p>
                          
                          <div className="text-xs text-gray-400">
                            Published: {formatDate(cve?.published)}
                          </div>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </TabsContent>

            <TabsContent value="analytics" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Top Affected Vendors */}
                <Card className="bg-[var(--cyber-navy)]/30 border-[var(--cyber-cyan)]/20">
                  <CardHeader>
                    <CardTitle className="text-sm text-[var(--cyber-cyan)] flex items-center">
                      <TrendingUp className="w-4 h-4 mr-2" />
                      Top Affected Vendors
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {getTopVendors().map((vendor, index) => (
                        <div key={vendor.vendor} className="flex items-center justify-between">
                          <span className="text-sm text-gray-300 capitalize">
                            {vendor.vendor.replace(/_/g, ' ')}
                          </span>
                          <Badge variant="outline" className="text-xs">
                            {vendor.count}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Severity Trend */}
                <Card className="bg-[var(--cyber-navy)]/30 border-[var(--cyber-cyan)]/20">
                  <CardHeader>
                    <CardTitle className="text-sm text-[var(--cyber-cyan)] flex items-center">
                      <TrendingUp className="w-4 h-4 mr-2" />
                      Severity Distribution
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {[
                        { label: 'Critical', count: stats.critical, color: 'bg-red-500' },
                        { label: 'High', count: stats.high, color: 'bg-orange-500' },
                        { label: 'Medium', count: stats.medium, color: 'bg-yellow-500' },
                        { label: 'Low', count: stats.low, color: 'bg-green-500' }
                      ].map((severity) => (
                        <div key={severity.label} className="space-y-1">
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-300">{severity.label}</span>
                            <span className="text-gray-400">{severity.count}</span>
                          </div>
                          <div className="w-full bg-gray-700 rounded-full h-2">
                            <div
                              className={`h-2 rounded-full ${severity.color}`}
                              style={{
                                width: `${(severity.count / stats.total) * 100}%`
                              }}
                            />
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}